/**
 * Txing AI API
 * Txing AI API文档
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GlobalModelMappingCondition from './GlobalModelMappingCondition';

/**
 * The GlobalModelMapping model module.
 * @module model/GlobalModelMapping
 * @version 1.0
 */
class GlobalModelMapping {
    /**
     * Constructs a new <code>GlobalModelMapping</code>.
     * @alias module:model/GlobalModelMapping
     */
    constructor() { 
        
        GlobalModelMapping.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GlobalModelMapping</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GlobalModelMapping} obj Optional instance to populate.
     * @return {module:model/GlobalModelMapping} The populated <code>GlobalModelMapping</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GlobalModelMapping();

            if (data.hasOwnProperty('conditions')) {
                obj['conditions'] = ApiClient.convertToType(data['conditions'], [GlobalModelMappingCondition]);
            }
            if (data.hasOwnProperty('sourceModel')) {
                obj['sourceModel'] = ApiClient.convertToType(data['sourceModel'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GlobalModelMapping</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GlobalModelMapping</code>.
     */
    static validateJSON(data) {
        if (data['conditions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['conditions'])) {
                throw new Error("Expected the field `conditions` to be an array in the JSON data but got " + data['conditions']);
            }
            // validate the optional field `conditions` (array)
            for (const item of data['conditions']) {
                GlobalModelMappingCondition.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['sourceModel'] && !(typeof data['sourceModel'] === 'string' || data['sourceModel'] instanceof String)) {
            throw new Error("Expected the field `sourceModel` to be a primitive type in the JSON string but got " + data['sourceModel']);
        }

        return true;
    }


}



/**
 * 条件列表
 * @member {Array.<module:model/GlobalModelMappingCondition>} conditions
 */
GlobalModelMapping.prototype['conditions'] = undefined;

/**
 * 源模型
 * @member {String} sourceModel
 */
GlobalModelMapping.prototype['sourceModel'] = undefined;






export default GlobalModelMapping;

