/**
 * Txing AI API
 * Txing AI API文档
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UtilsResponse from '../model/UtilsResponse';

/**
*  service.
* @module api/DefaultApi
* @version 1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * 获取用户列表
     * 获取用户列表，支持分页和条件筛选
     * @param {Number} page 页码
     * @param {Number} limit 每页数量
     * @param {Object} opts Optional parameters
     * @param {String} [orderBy] 排序字段
     * @param {String} [order] 排序方式(asc/desc)
     * @param {String} [userId] 用户ID
     * @param {Number} [status] 状态(0:禁用 1:启用)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UtilsResponse} and HTTP response
     */
    apiUserListGetWithHttpInfo(page, limit, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling apiUserListGet");
      }
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling apiUserListGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'page': page,
        'limit': limit,
        'order_by': opts['orderBy'],
        'order': opts['order'],
        'userId': opts['userId'],
        'status': opts['status']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UtilsResponse;
      return this.apiClient.callApi(
        '/api/user/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 获取用户列表
     * 获取用户列表，支持分页和条件筛选
     * @param {Number} page 页码
     * @param {Number} limit 每页数量
     * @param {Object} opts Optional parameters
     * @param {String} opts.orderBy 排序字段
     * @param {String} opts.order 排序方式(asc/desc)
     * @param {String} opts.userId 用户ID
     * @param {Number} opts.status 状态(0:禁用 1:启用)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UtilsResponse}
     */
    apiUserListGet(page, limit, opts) {
      return this.apiUserListGetWithHttpInfo(page, limit, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
