/**
 * Txing AI API
 * Txing AI API文档
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DtoAgentExecReq from '../model/DtoAgentExecReq';
import UtilsResponse from '../model/UtilsResponse';

/**
* Agent service.
* @module api/AgentApi
* @version 1.0
*/
export default class AgentApi {

    /**
    * Constructs a new AgentApi. 
    * @alias module:api/AgentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * 调用智能体
     * 调用智能体
     * @param {module:model/DtoAgentExecReq} data 请求信息
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UtilsResponse} and HTTP response
     */
    apiAgentExecPostWithHttpInfo(data) {
      let postBody = data;
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiAgentExecPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UtilsResponse;
      return this.apiClient.callApi(
        '/api/agent/exec', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 调用智能体
     * 调用智能体
     * @param {module:model/DtoAgentExecReq} data 请求信息
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UtilsResponse}
     */
    apiAgentExecPost(data) {
      return this.apiAgentExecPostWithHttpInfo(data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 基于 SSE 调用智能体
     * 使用 Server-Sent Events 流式调用智能体
     * @param {module:model/DtoAgentExecReq} data 请求信息
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UtilsResponse} and HTTP response
     */
    apiAgentExecStreamPostWithHttpInfo(data) {
      let postBody = data;
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiAgentExecStreamPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['text/event-stream'];
      let returnType = UtilsResponse;
      return this.apiClient.callApi(
        '/api/agent/exec/stream', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 基于 SSE 调用智能体
     * 使用 Server-Sent Events 流式调用智能体
     * @param {module:model/DtoAgentExecReq} data 请求信息
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UtilsResponse}
     */
    apiAgentExecStreamPost(data) {
      return this.apiAgentExecStreamPostWithHttpInfo(data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
