/**
 * Txing AI API
 * Txing AI API文档
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TxingAiApi);
  }
}(this, function(expect, TxingAiApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TxingAiApi.VoConversationDetailVO();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('VoConversationDetailVO', function() {
    it('should create an instance of VoConversationDetailVO', function() {
      // uncomment below and update the code to test VoConversationDetailVO
      //var instance = new TxingAiApi.VoConversationDetailVO();
      //expect(instance).to.be.a(TxingAiApi.VoConversationDetailVO);
    });

    it('should have the property context (base name: "context")', function() {
      // uncomment below and update the code to test the property context
      //var instance = new TxingAiApi.VoConversationDetailVO();
      //expect(instance).to.be();
    });

    it('should have the property enableWeb (base name: "enableWeb")', function() {
      // uncomment below and update the code to test the property enableWeb
      //var instance = new TxingAiApi.VoConversationDetailVO();
      //expect(instance).to.be();
    });

    it('should have the property frequencyPenalty (base name: "frequencyPenalty")', function() {
      // uncomment below and update the code to test the property frequencyPenalty
      //var instance = new TxingAiApi.VoConversationDetailVO();
      //expect(instance).to.be();
    });

    it('should have the property maxTokens (base name: "maxTokens")', function() {
      // uncomment below and update the code to test the property maxTokens
      //var instance = new TxingAiApi.VoConversationDetailVO();
      //expect(instance).to.be();
    });

    it('should have the property messages (base name: "messages")', function() {
      // uncomment below and update the code to test the property messages
      //var instance = new TxingAiApi.VoConversationDetailVO();
      //expect(instance).to.be();
    });

    it('should have the property model (base name: "model")', function() {
      // uncomment below and update the code to test the property model
      //var instance = new TxingAiApi.VoConversationDetailVO();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new TxingAiApi.VoConversationDetailVO();
      //expect(instance).to.be();
    });

    it('should have the property presencePenalty (base name: "presencePenalty")', function() {
      // uncomment below and update the code to test the property presencePenalty
      //var instance = new TxingAiApi.VoConversationDetailVO();
      //expect(instance).to.be();
    });

    it('should have the property repetitionPenalty (base name: "repetitionPenalty")', function() {
      // uncomment below and update the code to test the property repetitionPenalty
      //var instance = new TxingAiApi.VoConversationDetailVO();
      //expect(instance).to.be();
    });

    it('should have the property temperature (base name: "temperature")', function() {
      // uncomment below and update the code to test the property temperature
      //var instance = new TxingAiApi.VoConversationDetailVO();
      //expect(instance).to.be();
    });

    it('should have the property topK (base name: "topK")', function() {
      // uncomment below and update the code to test the property topK
      //var instance = new TxingAiApi.VoConversationDetailVO();
      //expect(instance).to.be();
    });

    it('should have the property topP (base name: "topP")', function() {
      // uncomment below and update the code to test the property topP
      //var instance = new TxingAiApi.VoConversationDetailVO();
      //expect(instance).to.be();
    });

    it('should have the property userId (base name: "userId")', function() {
      // uncomment below and update the code to test the property userId
      //var instance = new TxingAiApi.VoConversationDetailVO();
      //expect(instance).to.be();
    });

  });

}));
